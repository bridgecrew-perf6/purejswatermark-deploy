{"version":3,"sources":["../../../packages/custom/src/index.js"],"names":["configure","configuration","PJWInstance","PJW","PJWConfig","hasAlpha","encoders","decoders","constants","addToConfig","newConfig","Object","entries","forEach","key","value","addImageType","typeModule","type","Array","isArray","mime","addType","mimeType","addPlugin","pluginModule","plugin","PJWEvChange","types","plugins"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;AAKiC;AAElB,SAASA,SAAT,CAAmBC,aAAnB,EAAqD;AAAA,MAAnBC,WAAmB,uEAALC,iBAAK;AAClE,MAAMC,SAAS,GAAG;AAChBC,IAAAA,QAAQ,EAAE,EADM;AAEhBC,IAAAA,QAAQ,EAAE,EAFM;AAGhBC,IAAAA,QAAQ,EAAE,EAHM;AAIhB,aAAO,EAJS;AAKhBC,IAAAA,SAAS,EAAE;AALK,GAAlB;;AAQA,WAASC,WAAT,CAAqBC,SAArB,EAAgC;AAC9BC,IAAAA,MAAM,CAACC,OAAP,CAAeF,SAAf,EAA0BG,OAA1B,CAAkC,gBAAkB;AAAA;AAAA,UAAhBC,GAAgB;AAAA,UAAXC,KAAW;;AAClDX,MAAAA,SAAS,CAACU,GAAD,CAAT,mCACKV,SAAS,CAACU,GAAD,CADd,GAEKC,KAFL;AAID,KALD;AAMD;;AAED,WAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAChC,QAAMC,IAAI,GAAGD,UAAU,EAAvB;;AAEA,QAAIE,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACG,IAAnB,CAAJ,EAA8B;AAC5BC,uEAAWJ,IAAI,CAACG,IAAhB;AACD,KAFD,MAEO;AACLV,MAAAA,MAAM,CAACC,OAAP,CAAeM,IAAI,CAACG,IAApB,EAA0BR,OAA1B,CAAkC,UAAAU,QAAQ;AAAA,eAAID,iEAAWC,QAAX,EAAJ;AAAA,OAA1C;AACD;;AAED,WAAOL,IAAI,CAACG,IAAZ;AACAZ,IAAAA,WAAW,CAACS,IAAD,CAAX;AACD;;AAED,WAASM,SAAT,CAAmBC,YAAnB,EAAiC;AAC/B,QAAMC,MAAM,GAAGD,YAAY,CAACE,kBAAD,CAAZ,IAA6B,EAA5C;;AACA,QAAI,CAACD,MAAM,SAAP,IAAiB,CAACA,MAAM,CAAClB,SAA7B,EAAwC;AACtC;AACAC,MAAAA,WAAW,CAAC;AAAE,iBAAOiB;AAAT,OAAD,CAAX;AACD,KAHD,MAGO;AACLjB,MAAAA,WAAW,CAACiB,MAAD,CAAX;AACD;AACF;;AAED,MAAIzB,aAAa,CAAC2B,KAAlB,EAAyB;AACvB3B,IAAAA,aAAa,CAAC2B,KAAd,CAAoBf,OAApB,CAA4BG,YAA5B;AAEAd,IAAAA,WAAW,CAACK,QAAZ,mCACKL,WAAW,CAACK,QADjB,GAEKH,SAAS,CAACG,QAFf;AAIAL,IAAAA,WAAW,CAACI,QAAZ,mCACKJ,WAAW,CAACI,QADjB,GAEKF,SAAS,CAACE,QAFf;AAIAJ,IAAAA,WAAW,CAACG,QAAZ,mCACKH,WAAW,CAACG,QADjB,GAEKD,SAAS,CAACC,QAFf;AAID;;AAED,MAAIJ,aAAa,CAAC4B,OAAlB,EAA2B;AACzB5B,IAAAA,aAAa,CAAC4B,OAAd,CAAsBhB,OAAtB,CAA8BW,SAA9B;AACD;;AAED,4BAAcpB,SAAS,SAAvB,EAA+BF,WAA/B;AACA,2BAAaE,SAAS,CAACI,SAAvB,EAAkCN,WAAlC;AAEA,SAAOC,iBAAP;AACD","sourcesContent":["import PJW, {\n  addType,\n  addPJWMethods,\n  addConstants,\n  PJWEvChange\n} from \"../../core/src/index.js\" //'@PJW/core';\n\nexport default function configure(configuration, PJWInstance = PJW) {\n  const PJWConfig = {\n    hasAlpha: {},\n    encoders: {},\n    decoders: {},\n    class: {},\n    constants: {}\n  };\n\n  function addToConfig(newConfig) {\n    Object.entries(newConfig).forEach(([key, value]) => {\n      PJWConfig[key] = {\n        ...PJWConfig[key],\n        ...value\n      };\n    });\n  }\n\n  function addImageType(typeModule) {\n    const type = typeModule();\n\n    if (Array.isArray(type.mime)) {\n      addType(...type.mime);\n    } else {\n      Object.entries(type.mime).forEach(mimeType => addType(...mimeType));\n    }\n\n    delete type.mime;\n    addToConfig(type);\n  }\n\n  function addPlugin(pluginModule) {\n    const plugin = pluginModule(PJWEvChange) || {};\n    if (!plugin.class && !plugin.constants) {\n      // Default to class function\n      addToConfig({ class: plugin });\n    } else {\n      addToConfig(plugin);\n    }\n  }\n\n  if (configuration.types) {\n    configuration.types.forEach(addImageType);\n\n    PJWInstance.decoders = {\n      ...PJWInstance.decoders,\n      ...PJWConfig.decoders\n    };\n    PJWInstance.encoders = {\n      ...PJWInstance.encoders,\n      ...PJWConfig.encoders\n    };\n    PJWInstance.hasAlpha = {\n      ...PJWInstance.hasAlpha,\n      ...PJWConfig.hasAlpha\n    };\n  }\n\n  if (configuration.plugins) {\n    configuration.plugins.forEach(addPlugin);\n  }\n\n  addPJWMethods(PJWConfig.class, PJWInstance);\n  addConstants(PJWConfig.constants, PJWInstance);\n\n  return PJW;\n}\n"],"file":"index.js"}