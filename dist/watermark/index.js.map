{"version":3,"sources":["../../packages/watermark/index.js"],"names":["PJW","require","defaultOptions","ratio","opacity","dstPath","text","textSize","SizeEnum","Object","freeze","FONT_SANS_8_BLACK","FONT_SANS_10_BLACK","FONT_SANS_12_BLACK","FONT_SANS_14_BLACK","FONT_SANS_16_BLACK","FONT_SANS_32_BLACK","FONT_SANS_64_BLACK","FONT_SANS_128_BLACK","ErrorTextSize","Error","ErrorScaleRatio","ErrorOpacity","getDimensions","H","W","h","w","hh","ww","checkOptions","options","module","exports","addTextWatermark","mainImage","read","main","maxHeight","getHeight","maxWidth","getWidth","keys","includes","String","loadFont","font","X","Y","print","alignmentX","HORIZONTAL_ALIGN_CENTER","alignmentY","VERTICAL_ALIGN_MIDDLE","finalImage","quality","getMIME","mime","getBase64Async","err","data","console","log","then","bufferData","addWatermark","watermarkImage","watermark","newHeight","newWidth","resize","positionX","positionY","composite"],"mappings":"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","sourcesContent":["const PJW = require('../PJW/src/index.js');\n\nconst defaultOptions = {\n    ratio: 0.6,\n    opacity: 0.6,\n    dstPath: './watermark.jpg',\n    text: 'PJW-watermark',\n    textSize: 1,\n}\n\n\nconst SizeEnum = Object.freeze({\n    1: PJW.FONT_SANS_8_BLACK,\n    2: PJW.FONT_SANS_10_BLACK,\n    3: PJW.FONT_SANS_12_BLACK,\n    4: PJW.FONT_SANS_14_BLACK,\n    5: PJW.FONT_SANS_16_BLACK,\n    6: PJW.FONT_SANS_32_BLACK,\n    7: PJW.FONT_SANS_64_BLACK,\n    8: PJW.FONT_SANS_128_BLACK,\n})\nconst ErrorTextSize = new Error(\"Text size must range from 1 - 8\");\nconst ErrorScaleRatio = new Error(\"Scale Ratio must be less than one!\");\nconst ErrorOpacity = new Error(\"Opacity must be less than one!\");\n\nconst getDimensions = (H, W, h, w, ratio) => {\n    let hh, ww;\n    if ((H / W) < (h / w)) {    //GREATER HEIGHT\n        hh = ratio * H;\n        ww = hh / h * w;\n    } else {                //GREATER WIDTH\n        ww = ratio * W;\n        hh = ww / w * h;\n    }\n    return [hh, ww];\n}\n\nconst checkOptions = (options) => {\n    options = { ...defaultOptions, ...options };\n    if (options.ratio > 1) {\n        throw ErrorScaleRatio;\n    }\n    if (options.opacity > 1) {\n        throw ErrorOpacity;\n    }\n    return options;\n}\n\n/**\n * @param {String} mainImage - Path of the image to be watermarked\n * @param {Object} options\n * @param {String} options.text     - String to be watermarked\n * @param {Number} options.textSize - Text size ranging from 1 to 8\n * @param {String} options.dstPath  - Destination path where image is to be exported\n */\nmodule.exports.addTextWatermark = async (mainImage, options) => {\n    try {\n        options = checkOptions(options);\n        const main = await PJW.read(mainImage);\n        const maxHeight = main.getHeight();\n        const maxWidth = main.getWidth();\n        if (Object.keys(SizeEnum).includes(String(options.textSize))) {\n            const font = await PJW.loadFont(SizeEnum[options.textSize]);\n            const X = 0,        //Always center aligned\n                Y = 0\n             const finalImage= await main.print(font, X, Y, {\n                text: options.text,\n                alignmentX: PJW.HORIZONTAL_ALIGN_CENTER,\n                alignmentY: PJW.VERTICAL_ALIGN_MIDDLE\n            }, maxWidth, maxHeight);\n            finalImage.quality(100)\n            const mime =  await finalImage.getMIME();\n            return await finalImage.getBase64Async(mime,(err,data)=>{\n\n                if(err){console.log(\"error get nase64async\",err)}\n\n            }).then(bufferData => {\n                 return bufferData;\n             }).catch(err=>{\n                 throw err;\n             })\n        } else {\n            throw ErrorTextSize;\n        }\n    } catch (err) {\n        throw err;\n    }\n}\n\n/**\n * @param {String} mainImage - Path of the image to be watermarked\n * @param {String} watermarkImage - Path of the watermark image to be applied\n * @param {Object} options\n * @param {Float} options.ratio     - Ratio in which the watermark is overlaid\n * @param {Float} options.opacity   - Value of opacity of the watermark image during overlay\n * @param {String} options.dstPath  - Destination path where image is to be exported\n */\nconst addWatermark = async(mainImage, watermarkImage, options) => {\n   // let result;\n    try{  options = checkOptions(options);\n        const main = await PJW.read(mainImage);\n        console.log(\"this is main\",main)\n        const watermark = await PJW.read(watermarkImage);\n        const [newHeight, newWidth] = getDimensions(main.getHeight(), main.getWidth(), watermark.getHeight(), watermark.getWidth(), options.ratio);\n        watermark.resize(newWidth, newHeight);\n        const positionX = (main.getWidth() - newWidth) / 2;     //Centre aligned\n        const positionY = (main.getHeight() - newHeight) / 2;   //Centre aligned\n        watermark.opacity(options.opacity);\n        main.composite(watermark,\n            positionX,\n            positionY,\n            PJW.HORIZONTAL_ALIGN_CENTER | PJW.VERTICAL_ALIGN_MIDDLE);\n        main.quality(100)//.write(options.dstPath);\n        const mime =  await main.getMIME();       \n        console.log(\"this is mime\",mime)   \n       return await main.getBase64Async(mime).then(bufferData => {\n            //result = bufferData;\n            //console.log(\"this is result\",result)\n            return bufferData;\n          //newResult.src = bufferData;\n        }).catch(err=>{\n            throw err;\n        })\n    //return result;\n}\n   catch(err){\n        throw err\n   }\n  };\n  \n  module.exports.addWatermark = addWatermark;\n\n"],"file":"index.js"}